https://www.olindata.com/training/netherlands/amsterdam/linux-security-amsterdam-february-2017

http://centoshowtos.org/installation/kickstart-and-cobbler/


Cobbler Setup on CentOS7
Distro Profile
Cobbler is a Linux provisioning server that facilitates and automates the network-based system installation of multiple computer operating systems from a central point using services such as DHCP, TFTP, and DNS. It can be configured for PXE. Cobbler is able to manage complex network scenarios like bridging on a bonded Ethernet link.
 

Cobbler builds on the Kickstart mechanism and offers installation profiles that can be applied to one or many machines. It also features integration with Yum to aid in machine installs. This will help to install several servers in a data ceter withour physically accessing them.

The setup has been illustrated using two VMs. Therefore, get two VMs cobbler and cobtest ready with bridged network. All the servers should be on the same series of the network, as servers need to interact with each other. The first boot order for cobtest must be network.
Disable SELinux

Before getting started with Cobbler, it would be better to disable selinux and firewall or apply the firewall rules. The better option would be to disable initially and enable firewall rules after completion.
Installing Cobbler

 Install the latest epel repository for CentOS7.

[root@cobbler ~]# rpm -Uvh https://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm

Retrieving https://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch...
warning: /var/tmp/rpm-tmp.Cisj7E: Header V3 RSA/SHA256 Signature, key ID 352c64e5: NOKEY
Preparing...                          ################################# [100%]
Updating / installing...
   1:epel-release-7-5                 ################################# [100%]

[root@cobbler ~]#

Installing Cobbler is done thourgh yum. The other packages required is also added. Dependancy packages also listed below.

[root@cobbler ~]# yum install cobbler cobbler-web dnsmasq syslinux pykickstart

Installed:
  cobbler.noarch 0:2.6.9-1.el7       cobbler-web.noarch 0:2.6.9-1.el7       pykickstart.noarch 0:1.99.43.17-1.el7       syslinux.x86_64 0:4.05-12.el7      
 
Dependency Installed:
  PyYAML.x86_64 0:3.10-11.el7                          apr.x86_64 0:1.4.8-3.el7                                   apr-util.x86_64 0:1.5.2-6.el7                          
  createrepo.noarch 0:0.9.9-23.el7                    deltarpm.x86_64 0:3.6-3.el7                            genisoimage.x86_64 0:1.1.11-22.el7                     
  httpd.x86_64 0:2.4.6-31.el7.centos                 httpd-tools.x86_64 0:2.4.6-31.el7.centos        jbigkit-libs.x86_64 0:2.0-11.el7                       
  libjpeg-turbo.x86_64 0:1.2.90-5.el7                libtiff.x86_64 0:4.0.3-14.el7                               libusal.x86_64 0:1.1.11-22.el7                         
  libwebp.x86_64 0:0.3.0-3.el7                           libxml2-python.x86_64 0:2.9.1-5.el7_1.2         libyaml.x86_64 0:0.1.4-11.el7_0                        
  mailcap.noarch 0:2.1.41-2.el7                         mod_ssl.x86_64 1:2.4.6-31.el7.centos              mod_wsgi.x86_64 0:3.4-12.el7_0                         
  mtools.x86_64 0:4.0.18-5.el7                          python-chardet.noarch 0:2.2.1-1.el7_1             python-cheetah.x86_64 0:2.4.4-5.el7.centos             
  python-deltarpm.x86_64 0:3.6-3.el7              python-django.noarch 0:1.6.11-1.el7               python-django-bash-completion.noarch 0:1.6.11-1.el7    
  python-kitchen.noarch 0:1.1.1-5.el7              python-markdown.noarch 0:2.4.1-1.el7.centos     python-netaddr.noarch 0:0.7.5-7.el7                    
  python-pillow.x86_64 0:2.0.0-17.gitd1c6db8.el7     python-pygments.noarch 0:1.4-9.el7     python-simplejson.x86_64 0:3.3.3-1.el7                 
  rsync.x86_64 0:3.0.9-15.el7                             tftp-server.x86_64 0:5.2-11.el7                           xinetd.x86_64 2:2.3.15-12.el7                          
  yum-utils.noarch 0:1.1.31-29.el7                  
 
Updated:
  dnsmasq.x86_64 0:2.66-13.el7_1                                                                                                                             
 
Dependency Updated:
  libxml2.x86_64 0:2.9.1-5.el7_1.2                                                                                                                           
 
Complete!

Start the Cobbler services. 

[root@cobbler ~]# systemctl enable cobblerd
ln -s '/usr/lib/systemd/system/cobblerd.service' '/etc/systemd/system/multi-user.target.wants/cobblerd.service'
[root@cobbler ~]# systemctl start cobblerd
[root@cobbler ~]# 
[root@cobbler ~]# systemctl enable httpd
ln -s '/usr/lib/systemd/system/httpd.service' '/etc/systemd/system/multi-user.target.wants/httpd.service'
[root@cobbler ~]# systemctl start httpd

The package cobbler-web provide a beautiful web interface with default user and password as 'cobbler'. The web interface can be accessible using below link.

https://192.168.0.5/cobbler_web
Configuration

Configuration includes changes in the settings file. Settings for cobbler/cobblerd are stored in /etc/cobbler/settings. This file is a YAML formatted data file.

This setting default_password_crypted controls the root password that is set for new systems during the kickstart. This should be modified by running the command openssl passwd -1 and inserting the output into the above string.

In order to PXE boot, you need a DHCP server to hand out addresses and direct the booting system to the TFTP server where it can download the network boot files. Cobbler can manage this for you, via the manage_dhcp setting.

The server option sets the IP that will be used for the address of the cobbler server. The next_server option is used for DHCP/PXE as the IP of the TFTP server from which network boot files are downloaded. Usually, this will be the same IP as the server setting.

/etc/cobbler/settings:
default_password_crypted: "{root password for installed systems. Encrypt your own with openssl passwd -1}"
manage_dhcp: 1
manage_dns: 1
pxe_just_once: 1
next_server: 192.168.0.5
server: 192.168.0.5

Another configuration file is /etc/cobbler/modules.conf

/etc/cobbler/modules.conf
[dns]
module = manage_dnsmasq
 
[dhcp]
module = manage_dnsmasq

DNS and DHCP modules will be managed.

This template will most likely need to be modified as well, based on your network settings. The parameter range dynamic-bootp should have the range of IPs.

/etc/cobbler/dhcp.template
 
subnet 192.168.1.0 netmask 255.255.255.0 {
     option routers             192.168.1.5;
     option domain-name-servers 192.168.1.1;
     option subnet-mask         255.255.255.0;
     range dynamic-bootp        192.168.0.4 192.168.0.25;
     default-lease-time         21600;
     max-lease-time             43200;
     next-server                $next_server;
     class "pxeclients" {
          match if substring (option vendor-class-identifier, 0, 9) = "PXEClient";
          if option pxe-system-type = 00:02 {
                  filename "ia64/elilo.efi";
          } else if option pxe-system-type = 00:06 {
                  filename "grub/grub-x86.efi";
          } else if option pxe-system-type = 00:07 {
                  filename "grub/grub-x86_64.efi";
          } else {
                  filename "pxelinux.0";
          }
     }
 
}

Edit /etc/cobbler/dnsmasq.template to configure a simple DHCP server.

/etc/cobbler/dnsmasq.template
...
...
read-ethers
addn-hosts = /var/lib/cobbler/cobbler_hosts
 
dhcp-range=192.168.0.4,192.168.0.25
dhcp-option=3,$next_server
dhcp-lease-max=1000
dhcp-authoritative
dhcp-boot=pxelinux.0
dhcp-boot=net:normalarch,pxelinux.0
dhcp-boot=net:ia64,$elilo

Finally, restart the cobbler services and sync it. Start xinetd services too.

systemctl restart cobblerd
cobbler check
cobbler sync
systemctl enable xinetd
systemctl start xinetd

Cobbler check will list the potential configuration item to fix. It's kind of a warning. Cobbler sync applies the changes.
Importing the First Distribution

Open the cobbler VM's settings in VirtualBox and go to Storage to find its CD Drive, and "insert" the iso previously downloaded. Then mount and import this distro (CentOS 7):

There are other options available for distro import ie, usb, cdrom, dvd etc.

Below is the distro import steps.

[root@cobbler ~]# mkdir /mnt/iso
[root@cobbler ~]# mount -o loop /dev/cdrom /mnt/iso
 
[root@cobbler ~]# cobbler import --arch=x86_64 --path=/mnt/iso --name=CentOS-7
task started: 2015-07-29_041825_import
task started (id=Media import, time=Wed Jul 29 04:18:25 2015)
Found a candidate signature: breed=redhat, version=rhel6
Found a candidate signature: breed=redhat, version=rhel7
Found a matching signature: breed=redhat, version=rhel7
Adding distros from path /var/www/cobbler/ks_mirror/CentOS-7-x86_64:
creating new distro: CentOS-7-x86_64
trying symlink: /var/www/cobbler/ks_mirror/CentOS-7-x86_64 -> /var/www/cobbler/links/CentOS-7-x86_64
creating new profile: CentOS-7-x86_64
associating repos
checking for rsync repo(s)
checking for rhn repo(s)
checking for yum repo(s)
starting descent into /var/www/cobbler/ks_mirror/CentOS-7-x86_64 for CentOS-7-x86_64
processing repo at : /var/www/cobbler/ks_mirror/CentOS-7-x86_64
need to process repo/comps: /var/www/cobbler/ks_mirror/CentOS-7-x86_64
looking for /var/www/cobbler/ks_mirror/CentOS-7-x86_64/repodata/*comps*.xml
Keeping repodata as-is :/var/www/cobbler/ks_mirror/CentOS-7-x86_64/repodata
*** TASK COMPLETE ***
 
[root@cobbler ~]# cobbler distro list
   CentOS-7-x86_64
 
[root@cobbler ~]# cobbler profile list
   CentOS-7-x86_64
Object Details

[root@cobbler ~]# cobbler distro report --name=CentOS-7-x86_64
Name                           : CentOS-7-x86_64
Architecture                   : x86_64
TFTP Boot Files                : {}
Breed                          : redhat
Comment                        : 
Fetchable Files                : {}
Initrd                         : /var/www/cobbler/ks_mirror/CentOS-7-x86_64/images/pxeboot/initrd.img
Kernel                         : /var/www/cobbler/ks_mirror/CentOS-7-x86_64/images/pxeboot/vmlinuz
Kernel Options                 : {}
Kernel Options (Post Install)  : {}
Kickstart Metadata             : {'tree': 'http://@@http_server@@/cblr/links/CentOS-7-x86_64'}
Management Classes             : []
OS Version                     : rhel7
Owners                         : ['admin']
Red Hat Management Key         : <<inherit>>
Red Hat Management Server      : <<inherit>>
Template Files                 : {}
 
[root@cobbler ~]#

In the same way, you can import as many distros, you want. In most of the cases the minimal distro of any OS works very well. Importing a distro creates profile associated with distro. These two objects can also be seen though the web interface. Each profile has a kickstart profile and the default location for profiles is /var/lib/cobbler/kickstarts/. Let's create a new profile in the same directory.
Here's a kickstart proflie. This profile can also accessed from web interface.

# kickstart template for Fedora 8 and later.
# (includes %end blocks)
# do not use with earlier distros
 
#platform=x86, AMD64, or Intel EM64T
# System authorization information
auth  --useshadow  --enablemd5
# System bootloader configuration
bootloader --location=mbr
# Partition clearing information
clearpart --all --initlabel
# Use text mode install
text
# Firewall configuration
firewall --enabled
# Run the Setup Agent on first boot
firstboot --disable
# System keyboard
keyboard us
# System language
lang en_US
# Use network installation
url --url=http://192.168.0.5/cblr/links/CentOS-7-x86_64
# If any cobbler repo definitions were referenced in the kickstart profile, include them here.
repo --name=source-1 --baseurl=http://192.168.0.5/cobbler/ks_mirror/CentOS-7-x86_64
 
# Network information
network --bootproto=dhcp --device=eth0 --onboot=on  
 
# Reboot after installation
reboot
 
#Root password
rootpw --iscrypted $1$mF86/UHC$WvcIcX2t6crBz2onWxyac.
# SELinux configuration
selinux --disabled
# Do not configure the X Window System
skipx
# System timezone
timezone  America/New_York
# Install OS instead of upgrade
install
# Clear the Master Boot Record
zerombr
# Allow anaconda to partition the system as needed
autopart
 
%pre
set -x -v
exec 1>/tmp/ks-pre.log 2>&1
 
# Once root's homedir is there, copy over the log.
while : ; do
    sleep 10
    if [ -d /mnt/sysimage/root ]; then
        cp /tmp/ks-pre.log /mnt/sysimage/root/
        logger "Copied %pre section log to system"
        break
    fi
done &
 
 
curl "http://192.168.0.5/cblr/svc/op/trig/mode/pre/profile/CentOS-7-x86_64" -o /dev/null
 
# Enable installation monitoring
 
%end
 
%packages
 
 
%end
 
%post --nochroot
set -x -v
exec 1>/mnt/sysimage/root/ks-post-nochroot.log 2>&1
 
%end
 
%post
set -x -v
exec 1>/root/ks-post.log 2>&1
 
# Start yum configuration
curl "http://192.168.0.5/cblr/svc/op/yum/profile/CentOS-7-x86_64" --output /etc/yum.repos.d/cobbler-config.repo
 
# End yum configuration
 
 
 
# Start post_install_network_config generated code
# End post_install_network_config generated code
 
 
 
 
# Start download cobbler managed config files (if applicable)
# End download cobbler managed config files (if applicable)
 
# Start koan environment setup
echo "export COBBLER_SERVER=192.168.0.5" > /etc/profile.d/cobbler.sh
echo "setenv COBBLER_SERVER 192.168.0.5" > /etc/profile.d/cobbler.csh
# End koan environment setup
 
# begin Red Hat management server registration
# not configured to register to any Red Hat management server (ok)
# end Red Hat management server registration
 
# Begin cobbler registration
# cobbler registration is disabled in /etc/cobbler/settings
# End cobbler registration
 
# Enable post-install boot notification
 
# Start final steps
 
curl "http://192.168.0.5/cblr/svc/op/ks/profile/CentOS-7-x86_64" -o /root/cobbler.ks
curl "http://192.168.0.5/cblr/svc/op/trig/mode/post/profile/CentOS-7-x86_64" -o /dev/null
# End final steps
%end

In this kickstart profile the install mode is 'text', you can set it to 'graphical' in-case you need a GUI install mode. let's use this and create a new profile.

cobbler profile edit --name=CentOS-7-x86_64 --kickstart=/var/lib/cobbler/kickstarts/CentOS-7.ks

 
Create and Install a System

Now, we have distro and profile, we can create a system. Profiles can be used to PXE boot, but most of the features in cobbler revolve around system objects. The more information you give about a system, the more cobbler will do automatically for you.
First, we'll create a system object based on the profile that was created during the import. When creating a system, the name and profile are the only two required fields:
 

[root@cobbler ~]# cobbler system add --name=cobtest --profile=CentOS-7-x86_64  --interface=eth0 --mac=08:00:27:38:B5:90  --ip-address=192.168.0.15 --netboot-enabled=1 --static=1
 
[root@cobbler ~]# cobbler system list
   cobtest
[root@cobbler ~]# cobbler system report --name=cobtest
Name                           : cobtest
TFTP Boot Files                : {}
Comment                        : 
Enable gPXE?                   : <<inherit>>
Fetchable Files                : {}
Gateway                        : 
Hostname                       : 
Image                          : 
IPv6 Autoconfiguration         : False
IPv6 Default Device            : 
Kernel Options                 : {}
Kernel Options (Post Install)  : {}
Kickstart                      : <<inherit>>
Kickstart Metadata             : {}
LDAP Enabled                   : False
LDAP Management Type           : authconfig
Management Classes             : <<inherit>>
Management Parameters          : <<inherit>>
Monit Enabled                  : False
Name Servers                   : []
Name Servers Search Path       : []
Netboot Enabled                : True
Owners                         : <<inherit>>
Power Management Address       : 
Power Management ID            : 
Power Management Password      : 
Power Management Type          : ipmitool
Power Management Username      : 
Profile                        : CentOS-7-x86_64
Internal proxy                 : <<inherit>>
Red Hat Management Key         : <<inherit>>
Red Hat Management Server      : <<inherit>>
Repos Enabled                  : False
Server Override                : <<inherit>>
Status                         : production
Template Files                 : {}
Virt Auto Boot                 : <<inherit>>
Virt CPUs                      : <<inherit>>
Virt Disk Driver Type          : <<inherit>>
Virt File Size(GB)             : <<inherit>>
Virt Path                      : <<inherit>>
Virt PXE Boot                  : 0
Virt RAM (MB)                  : <<inherit>>
Virt Type                      : <<inherit>>
Interface =====                : eth0
Bonding Opts                   : 
Bridge Opts                    : 
CNAMES                         : []
InfiniBand Connected Mode      : False
DHCP Tag                       : 
DNS Name                       : 
Per-Interface Gateway          : 
Master Interface               : 
Interface Type                 : 
IP Address                     : 192.168.0.15
IPv6 Address                   : 
IPv6 Default Gateway           : 
IPv6 MTU                       : 
IPv6 Prefix                    : 
IPv6 Secondaries               : []
IPv6 Static Routes             : []
MAC Address                    : 08:00:27:38:B5:90
Management Interface           : False
MTU                            : 
Subnet Mask                    : 
Static                         : True
Static Routes                  : []
Virt Bridge                    : 
[root@cobbler ~]# 
 
[root@cobbler ~]# cobbler sync
task started: 2015-07-29_043839_sync
task started (id=Sync, time=Wed Jul 29 04:38:39 2015)
running pre-sync triggers
cleaning trees
removing: /var/www/cobbler/images/CentOS-7-x86_64
removing: /var/lib/tftpboot/pxelinux.cfg/01-08-00-27-38-b5-90
removing: /var/lib/tftpboot/pxelinux.cfg/default
removing: /var/lib/tftpboot/grub/images
removing: /var/lib/tftpboot/grub/01-08-00-27-38-B5-90
removing: /var/lib/tftpboot/grub/efidefault
removing: /var/lib/tftpboot/images/CentOS-7-x86_64
removing: /var/lib/tftpboot/s390x/profile_list
copying bootloaders
copying: /usr/share/syslinux/pxelinux.0 -> /var/lib/tftpboot/pxelinux.0
copying: /usr/share/syslinux/menu.c32 -> /var/lib/tftpboot/menu.c32
copying: /usr/share/syslinux/memdisk -> /var/lib/tftpboot/memdisk
copying distros to tftpboot
copying files for distro: CentOS-7-x86_64
trying hardlink /var/www/cobbler/ks_mirror/CentOS-7-x86_64/images/pxeboot/vmlinuz -> /var/lib/tftpboot/images/CentOS-7-x86_64/vmlinuz
trying hardlink /var/www/cobbler/ks_mirror/CentOS-7-x86_64/images/pxeboot/initrd.img -> /var/lib/tftpboot/images/CentOS-7-x86_64/initrd.img
copying images
generating PXE configuration files
generating: /var/lib/tftpboot/pxelinux.cfg/01-08-00-27-38-b5-90
generating: /var/lib/tftpboot/grub/01-08-00-27-38-B5-90
generating PXE menu structure
copying files for distro: CentOS-7-x86_64
trying hardlink /var/www/cobbler/ks_mirror/CentOS-7-x86_64/images/pxeboot/vmlinuz -> /var/www/cobbler/images/CentOS-7-x86_64/vmlinuz
trying hardlink /var/www/cobbler/ks_mirror/CentOS-7-x86_64/images/pxeboot/initrd.img -> /var/www/cobbler/images/CentOS-7-x86_64/initrd.img
Writing template files for CentOS-7-x86_64
rendering DHCP files
rendering DNS files
rendering TFTPD files
generating /etc/xinetd.d/tftp
processing boot_files for distro: CentOS-7-x86_64
cleaning link caches
running post-sync triggers
running python triggers from /var/lib/cobbler/triggers/sync/post/*
running python trigger cobbler.modules.sync_post_restart_services
running: service dnsmasq restart
received on stdout: 
received on stderr: Redirecting to /bin/systemctl restart  dnsmasq.service
 
running shell triggers from /var/lib/cobbler/triggers/sync/post/*
running python triggers from /var/lib/cobbler/triggers/change/*
running python trigger cobbler.modules.scm_track
running shell triggers from /var/lib/cobbler/triggers/change/*
*** TASK COMPLETE ***

 

The primary reason for creating a system object is network configuration. When using profiles, you're limited to DHCP interfaces, but with systems you can specify many more network configuration options. MAC address is one of the important parameter.  After adding a system with a static interface it is a good idea to execute a full "cobbler sync" to ensure the dhcpd.conf file is rewritten with the correct static info.

Now start the VM and it should boot into network installation, using cobbler server as source.
Conclusion

Cobbler can be some times complex system to get started with, due to the wide varities of technologies. Even though doing the things step by and keep verifying will lead to successful setup. Things has been expained pretty well in detailed fashion. Hope this article helps you.

Have fun and enjoy !!
PXE Install
 
GUI Bootup
